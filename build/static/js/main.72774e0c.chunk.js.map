{"version":3,"sources":["components/FriendCard/FriendCard.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","value","id","onClick","handleClick","alt","name","src","image","Nav","class","correctIncorrect","topScore","score","title","Wrapper","children","Title","App","state","friends","currentScore","clicked","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledFriends","array","i","length","j","Math","floor","random","randomFriends","this","map","friend","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"swFAqBeA,MAlBf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QAEb,yBAAKA,UAAU,gBAEfC,MAAOF,EAAMG,GACbC,QAAS,kBAAMJ,EAAMK,YAAYL,EAAMG,MAGrC,yBAAKG,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,WCS1BC,G,MAnBH,SAAAV,GAAK,OACb,yBACIW,MAAM,UAAS,4BAAI,2CAGnB,wBAAIA,MAAM,IAAIX,EAAMY,kBAEpB,4CAAkBZ,EAAMa,SAAxB,eAA8Cb,EAAMc,QAGpD,gCAASd,EAAMe,U,MCNRC,MAJf,SAAiBhB,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMiB,W,MCG1BC,MAJf,SAAelB,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMiB,W,WC4FvBE,E,2MA9EbC,MAAQ,CACNC,UACAC,aAAc,EACdT,SAAU,EACVD,iBAAkB,GAClBW,QAAS,I,EAGXlB,YAAc,SAAAF,IAC4B,IAApC,EAAKiB,MAAMG,QAAQC,QAAQrB,IAC7B,EAAKsB,kBACL,EAAKC,SAAS,CAAEH,QAAS,EAAKH,MAAMG,QAAQI,OAAOxB,MAEnD,EAAKyB,e,EAITH,gBAAkB,WAChB,IAAMI,EAAW,EAAKT,MAAME,aAAe,EAC3C,EAAKI,SAAS,CACZJ,aAAcO,EACdjB,iBAAkB,2BAEhBiB,GAAY,EAAKT,MAAMP,SACzB,EAAKa,SAAS,CAAEb,SAAUgB,IAEN,KAAbA,GACP,EAAKH,SAAS,CAAEd,iBAAkB,aAEpC,EAAKkB,iB,EAGPF,YAAc,WACZ,EAAKF,SAAS,CACZJ,aAAc,EACdT,SAAU,EAAKO,MAAMP,SACrBD,iBAAkB,2BAClBW,QAAS,KAEX,EAAKO,iB,EAGPA,cAAgB,WACd,IAAIC,EArDR,SAAuBC,GACrB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,EAgDiBO,CAAclB,GACpC,EAAKK,SAAS,CAAEL,QAASU,K,wEAGjB,IAAD,OACP,OAEE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEjB,MAAO0B,KAAKpB,MAAME,aAClBT,SAAU2B,KAAKpB,MAAMP,SACrBD,iBAAkB4B,KAAKpB,MAAMR,mBAE/B,kBAAC,EAAD,iFAIK4B,KAAKpB,MAAMC,QAAQoB,KAAI,SAAAC,GAAM,OAC1B,kBAAC,EAAD,CACEC,IAAKD,EAAOvC,GACZE,YAAa,EAAKA,YAClBoB,gBAAiB,EAAKA,gBACtBG,YAAa,EAAKA,YAClBE,cAAe,EAAKA,cACpB3B,GAAIuC,EAAOvC,GACXM,MAAOiC,EAAOjC,gB,GAtEdmC,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.72774e0c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n        \n      <div className=\"img-container\"\n      \n      value={props.id}\n      onClick={() => props.handleClick(props.id)}\n      >\n          \n        <img alt={props.name} src={props.image} />\n      </div>\n      \n      \n    </div>\n  );\n}\n\nexport default FriendCard;\n\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Nav = props => (\n    <nav\n        class=\"navbar\"><ul><li>Clicky Game</li>\n        \n        \n        <li class=\"\">{props.correctIncorrect}</li>\n        \n        <li>Score - Top: {props.topScore} | Current: {props.score}</li></ul>\n        \n        \n        <header>{props.title}</header>\n        \n        \n            \n        </nav>  \n\n       \n);\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n\n\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\n// Random shuffle\nfunction randomFriends(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  // Set this.state\n  state = {\n    friends,\n    currentScore: 0,\n    topScore: 0,\n    correctIncorrect: \"\",\n    clicked: [],\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      correctIncorrect: \"You guessed correctly!\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    else if (newScore === 12) {\n      this.setState({ correctIncorrect: \"You win!\" });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      correctIncorrect: \"You guessed incorrectly!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledFriends = randomFriends(friends);\n    this.setState({ friends: shuffledFriends });\n  };\n\n  render() {\n    return (\n\n      <Wrapper>\n        <Nav\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n          correctIncorrect={this.state.correctIncorrect}\n        />\n        <Title>\n          Click on an image to earn points, but don't click on any more than once!\n        </Title>\n\n            {this.state.friends.map(friend => (\n                <FriendCard\n                  key={friend.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={friend.id}\n                  image={friend.image}\n                />\n            ))}\n      </Wrapper>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}